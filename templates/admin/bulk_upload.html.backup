{% extends "admin/base_site.html" %}
{% load static %}

{% block title %}Bulk Upload Users{% endblock %}

{% block content %}
<!-- Skills data for JavaScript -->
<script>
const skillsData = {{ skills|safe|default:"[]" }};
</script>
<h1>Bulk Upload Users</h1>

<div class="module" style="margin-bottom: 20px;">
    <div style="display: flex; gap: 10px; margin-bottom: 20px;">
        <button onclick="showUploadSection()" class="button" id="uploadBtn" style="background: #417690; color: white; padding: 10px 30px; border: none; cursor: pointer; font-size: 14px; font-weight: bold;">
            üì§ Upload Excel File
        </button>
        <button onclick="showManualSection()" class="button" id="manualBtn" style="background: #28a745; color: white; padding: 10px 30px; border: none; cursor: pointer; font-size: 14px; font-weight: bold;">
            ‚úèÔ∏è Manual Entry
        </button>
    </div>
</div>

<!-- Excel Upload Section -->
<div class="module" id="uploadSection">
    <h2>Upload Excel File</h2>
    <p>Upload an Excel file (.xlsx or .xls) to create multiple users, technicians, and service requests at once.</p>
    
    <form method="post" enctype="multipart/form-data" style="margin-top: 20px;">
        {% csrf_token %}
        <input type="hidden" name="mode" value="upload">
        
        <div style="margin: 20px 0;">
            {{ form.as_p }}
        </div>
        
        <div style="margin: 20px 0;">
            <button type="submit" class="button" style="background: #417690; color: white; padding: 10px 30px; border: none; cursor: pointer; font-size: 14px; font-weight: bold;">
                Upload and Process
            </button>
        </div>
    </form>
</div>

<!-- Manual Entry Section -->
<div class="module" id="manualSection" style="display: none;">
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
        <h2 style="color: white; margin: 0;">üìù Manual Entry</h2>
        <p style="color: #f0f0f0; margin: 10px 0 0 0;">Add users manually with a guided form. Follow the step-by-step process for each entry.</p>
    </div>
    
    <form method="post" id="manualForm" style="margin-top: 20px;" onsubmit="return validateAndSubmit(event)">
        {% csrf_token %}
        <input type="hidden" name="mode" value="manual">
        
        <!-- Separate sections for Customers and Technicians -->
        <div style="margin: 20px 0;">
            <!-- Customer Section -->
            <div style="margin-bottom: 30px; padding: 15px; border: 2px solid #417690; border-radius: 8px;">
                <h3 style="margin-top: 0; color: #417690; padding-bottom: 10px; border-bottom: 2px solid #417690;">
                    üë§ Add Customers with Service Requests
                </h3>
                <div id="customerEntriesContainer">
                    <!-- Customer entries will be added dynamically -->
                </div>
                <button type="button" onclick="addCustomerRow()" class="button" style="background: #417690; color: white; padding: 10px 20px; border: none; cursor: pointer; font-size: 14px; font-weight: bold; margin: 10px 5px;">
                    ‚ûï Add Customer
                </button>
            </div>
            
            <!-- Technician Section -->
            <div style="padding: 15px; border: 2px solid #34A853; border-radius: 8px;">
                <h3 style="margin-top: 0; color: #34A853; padding-bottom: 10px; border-bottom: 2px solid #34A853;">
                    üîß Add Technicians with Availability
                </h3>
                <div id="technicianEntriesContainer">
                    <!-- Technician entries will be added dynamically -->
                </div>
                <button type="button" onclick="addTechnicianRow()" class="button" style="background: #34A853; color: white; padding: 10px 20px; border: none; cursor: pointer; font-size: 14px; font-weight: bold; margin: 10px 5px;">
                    ‚ûï Add Technician
                </button>
            </div>
        </div>
        
        <div style="margin: 20px 0; text-align: center;">
            <button type="submit" class="button" style="background: #28a745; color: white; padding: 15px 40px; border: none; cursor: pointer; font-size: 16px; font-weight: bold; border-radius: 5px;">
                üíæ Save All Entries
            </button>
        </div>
    </form>
</div>

<script>
let rowCount = 0;

function showUploadSection() {
    document.getElementById('uploadSection').style.display = 'block';
    document.getElementById('manualSection').style.display = 'none';
    document.getElementById('uploadBtn').style.background = '#417690';
    document.getElementById('manualBtn').style.background = '#28a745';
}

function showManualSection() {
    document.getElementById('uploadSection').style.display = 'none';
    document.getElementById('manualSection').style.display = 'block';
    document.getElementById('uploadBtn').style.background = '#417690';
    document.getElementById('manualBtn').style.background = '#28a745';
}

// Add Customer Row Function
function addCustomerRow() {
    const container = document.getElementById('customerEntriesContainer');
    const row = document.createElement('div');
    row.className = 'customer-entry-row';
    row.style.marginBottom = '20px';
    row.style.padding = '20px';
    row.style.border = '2px solid #417690';
    row.style.borderRadius = '8px';
    row.style.backgroundColor = '#f0f8ff';
    
    row.innerHTML = `
        <h4 style="margin-top: 0; color: #417690; padding-bottom: 10px; border-bottom: 2px solid #417690;">Customer ${rowCount + 1}</h4>
        
        <!-- User Information -->
        <h5 style="color: #417690; margin-top: 15px; margin-bottom: 10px;">User Information</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 15px;">
            <div>
                <label>Username *</label>
                <input type="text" name="username_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Email *</label>
                <input type="email" name="email_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Phone</label>
                <input type="text" name="phone_${rowCount}" placeholder="Optional" style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Password</label>
                <input type="text" name="password_${rowCount}" value="Welcome123" style="width: 100%; padding: 8px;">
            </div>
        </div>
        
        <!-- Hidden type field -->
        <input type="hidden" name="type_${rowCount}" value="Customer">
        
        <!-- Service Request Details -->
        <h5 style="color: #417690; margin-top: 15px; margin-bottom: 10px;">Service Request Details</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
            <div>
                <label>Service Type *</label>
                <select name="service_type_${rowCount}" required style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px;">
                    <option value="">Select service type...</option>
                    <option value="Gas Leak Repair">Gas Leak Repair</option>
                    <option value="Electrical Fault">Electrical Fault</option>
                    <option value="Plumbing Issue">Plumbing Issue</option>
                    <option value="HVAC Maintenance">HVAC Maintenance</option>
                    <option value="Appliance Installation">Appliance Installation</option>
                    <option value="Emergency Callout">Emergency Callout</option>
                    <option value="Routine Service">Routine Service</option>
                    <option value="Maintenance Check">Maintenance Check</option>
                    <option value="Safety Inspection">Safety Inspection</option>
                    <option value="System Upgrade">System Upgrade</option>
                </select>
            </div>
            <div style="grid-column: 1 / -1;">
                <label>Address * <small style="color: #666;">(Start typing for Melbourne suggestions)</small></label>
                <input type="text" name="address_${rowCount}" id="address_input_${rowCount}" placeholder="Start typing a Melbourne address..." required style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 14px;" autocomplete="off">
            </div>
            <div>
                <label>Service Minutes *</label>
                <input type="number" name="service_minutes_${rowCount}" value="60" min="15" max="480" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Window Start *</label>
                <input type="datetime-local" name="window_start_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Window End *</label>
                <input type="datetime-local" name="window_end_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Priority</label>
                <select name="priority_${rowCount}" style="width: 100%; padding: 8px;">
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="low">Low</option>
                </select>
            </div>
            <div style="grid-column: 1 / -1;">
                <label>Required Skills</label>
                <select name="required_skills_${rowCount}" id="required_skills_customer_${rowCount}" multiple style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px; min-height: 100px;">
                    <!-- Skills will be populated dynamically -->
                </select>
                <small style="color: #666;">Hold Ctrl/Cmd to select multiple skills</small>
            </div>
            <div style="grid-column: 1 / -1;">
                <label>Notes</label>
                <textarea name="notes_${rowCount}" placeholder="Additional notes or details" rows="2" style="width: 100%; padding: 8px;"></textarea>
            </div>
        </div>
        
        <button type="button" onclick="this.parentElement.remove()" style="background: #dc3545; color: white; padding: 5px 15px; border: none; cursor: pointer; margin-top: 10px; border-radius: 5px;">
            ‚ùå Remove Customer
        </button>
    `;
    
    container.appendChild(row);
    
    // Populate skills dropdown for this customer
    setTimeout(function() {
        populateSkillsDropdowns(rowCount, 'required_skills_customer_' + rowCount);
        initAutocomplete(rowCount);
    }, 100);
    
    rowCount++;
}

// Add Technician Row Function
function addTechnicianRow() {
    const container = document.getElementById('technicianEntriesContainer');
    const row = document.createElement('div');
    row.className = 'technician-entry-row';
    row.style.marginBottom = '20px';
    row.style.padding = '20px';
    row.style.border = '2px solid #34A853';
    row.style.borderRadius = '8px';
    row.style.backgroundColor = '#f0fff0';
    
    row.innerHTML = `
        <h4 style="margin-top: 0; color: #34A853; padding-bottom: 10px; border-bottom: 2px solid #34A853;">Technician ${rowCount + 1}</h4>
        
        <!-- User Information -->
        <h5 style="color: #34A853; margin-top: 15px; margin-bottom: 10px;">User Information</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 15px;">
            <div>
                <label>Username *</label>
                <input type="text" name="username_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Email *</label>
                <input type="email" name="email_${rowCount}" required style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Phone</label>
                <input type="text" name="phone_${rowCount}" placeholder="Optional" style="width: 100%; padding: 8px;">
            </div>
            <div>
                <label>Password</label>
                <input type="text" name="password_${rowCount}" value="Welcome123" style="width: 100%; padding: 8px;">
            </div>
        </div>
        
        <!-- Hidden type field -->
        <input type="hidden" name="type_${rowCount}" value="Technician">
        
        <!-- Technician Profile Details -->
        <h5 style="color: #34A853; margin-top: 15px; margin-bottom: 10px;">Technician Profile Details</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
            <div style="grid-column: 1 / -1;">
                <label>Depot Address * <small style="color: #666;">(Start typing for Melbourne suggestions)</small></label>
                <input type="text" name="depot_address_${rowCount}" id="depot_address_input_${rowCount}" placeholder="Start typing a Melbourne depot address..." required style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 14px;" autocomplete="off">
            </div>
            <div>
                <label>Capacity Hours *</label>
                <input type="number" name="capacity_hours_${rowCount}" value="8" min="1" max="24" required style="width: 100%; padding: 8px;">
                <small style="color: #666;">Daily work capacity</small>
            </div>
            <div>
                <label>Shift Start *</label>
                <input type="time" name="shift_start_${rowCount}" value="08:00" required style="width: 100%; padding: 8px;">
                <small style="color: #666;">Daily start time</small>
            </div>
            <div>
                <label>Shift End *</label>
                <input type="time" name="shift_end_${rowCount}" value="17:00" required style="width: 100%; padding: 8px;">
                <small style="color: #666;">Daily end time</small>
            </div>
            <div style="grid-column: 1 / -1;">
                <label>Skills</label>
                <select name="skills_${rowCount}" id="skills_technician_${rowCount}" multiple style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px; min-height: 100px;">
                    <!-- Skills will be populated dynamically -->
                </select>
                <small style="color: #666;">Hold Ctrl/Cmd to select multiple skills</small>
            </div>
            <div>
                <label>Color Hex</label>
                <input type="color" name="color_hex_${rowCount}" value="#4285F4" style="width: 100%; padding: 5px;">
                <small style="color: #666;">Route display color</small>
            </div>
        </div>
        
        <button type="button" onclick="this.parentElement.remove()" style="background: #dc3545; color: white; padding: 5px 15px; border: none; cursor: pointer; margin-top: 10px; border-radius: 5px;">
            ‚ùå Remove Technician
        </button>
    `;
    
    container.appendChild(row);
    
    // Populate skills dropdown for this technician
    setTimeout(function() {
        populateSkillsDropdowns(rowCount, 'skills_technician_' + rowCount);
        initAutocomplete(rowCount);
    }, 100);
    
    rowCount++;
}

function addRow() {
    const container = document.getElementById('entriesContainer');
    const row = document.createElement('div');
    row.className = 'manual-entry-row';
    row.style.marginBottom = '20px';
    row.style.padding = '20px';
    row.style.border = '2px solid #417690';
    row.style.borderRadius = '8px';
    row.style.backgroundColor = '#f9f9f9';
    
    row.innerHTML = `
        <h3 style="margin-top: 0; color: #417690; padding-bottom: 10px; border-bottom: 2px solid #417690;">Entry ${rowCount + 1}</h3>
        
        <!-- Step 1: Type Selection -->
        <div id="step1_${rowCount}" class="entry-step">
            <h4 style="color: #417690; margin-bottom: 10px;">Step 1: Select Type</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                <div style="grid-column: 1 / 3;">
                    <label><strong>Type *</strong></label>
                    <select name="type_${rowCount}" required id="typeSelect_${rowCount}" style="width: 100%; padding: 10px; font-size: 16px;">
                        <option value="">Choose Customer or Technician...</option>
                        <option value="Customer">Customer (with Service Request)</option>
                        <option value="Technician">Technician (with Availability)</option>
                    </select>
                </div>
            </div>
        </div>
        
        <!-- Step 2: User Basic Info -->
        <div id="step2_${rowCount}" class="entry-step" style="display: none; margin-top: 15px;">
            <h4 style="color: #417690; margin-bottom: 10px;">Step 2: User Information</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                <div>
                    <label>Username *</label>
                    <input type="text" name="username_${rowCount}" required style="width: 100%; padding: 8px;">
                </div>
                <div>
                    <label>Email *</label>
                    <input type="email" name="email_${rowCount}" required style="width: 100%; padding: 8px;">
                </div>
                <div>
                    <label>Phone</label>
                    <input type="text" name="phone_${rowCount}" placeholder="Optional" style="width: 100%; padding: 8px;">
                </div>
                <div>
                    <label>Password</label>
                    <input type="text" name="password_${rowCount}" value="Welcome123" style="width: 100%; padding: 8px;">
                </div>
            </div>
        </div>
        
        <!-- Customer specific fields -->
        <div id="customer_fields_${rowCount}" style="display: none; margin-top: 10px;">
            <h4 style="margin-bottom: 10px; color: #417690;">Service Request Details</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                <div>
                    <label>Service Type *</label>
                    <select name="service_type_${rowCount}" required style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px;">
                        <option value="">Select service type...</option>
                        <option value="Gas Leak Repair">Gas Leak Repair</option>
                        <option value="Electrical Fault">Electrical Fault</option>
                        <option value="Plumbing Issue">Plumbing Issue</option>
                        <option value="HVAC Maintenance">HVAC Maintenance</option>
                        <option value="Appliance Installation">Appliance Installation</option>
                        <option value="Emergency Callout">Emergency Callout</option>
                        <option value="Routine Service">Routine Service</option>
                        <option value="Maintenance Check">Maintenance Check</option>
                        <option value="Safety Inspection">Safety Inspection</option>
                        <option value="System Upgrade">System Upgrade</option>
                        <option value="Custom">Custom (specify in notes)</option>
                    </select>
                </div>
                <div style="grid-column: 1 / -1;">
                    <label>Address * <small style="color: #666;">(Start typing for Melbourne suggestions)</small></label>
                    <input type="text" name="address_${rowCount}" id="address_input_${rowCount}" placeholder="Start typing a Melbourne address..." required style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 14px;" autocomplete="off">
                </div>
                <div>
                    <label>Service Minutes *</label>
                    <input type="number" name="service_minutes_${rowCount}" value="60" min="15" max="480" required style="width: 100%; padding: 5px;">
                </div>
                <div>
                    <label>Window Start *</label>
                    <input type="datetime-local" name="window_start_${rowCount}" required style="width: 100%; padding: 5px;">
                </div>
                <div>
                    <label>Window End *</label>
                    <input type="datetime-local" name="window_end_${rowCount}" required style="width: 100%; padding: 5px;">
                </div>
                <div>
                    <label>Priority</label>
                    <select name="priority_${rowCount}" style="width: 100%; padding: 5px;">
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                        <option value="low">Low</option>
                    </select>
                </div>
                <div style="grid-column: 1 / -1;">
                    <label>Required Skills</label>
                    <select name="required_skills_${rowCount}" id="required_skills_select_${rowCount}" multiple style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px; min-height: 100px;">
                        <!-- Skills will be populated dynamically -->
                    </select>
                    <small style="color: #666;">Hold Ctrl/Cmd to select multiple skills</small>
                </div>
                <div style="grid-column: 1 / -1;">
                    <label>Notes</label>
                    <textarea name="notes_${rowCount}" placeholder="Additional notes or details about the service request" rows="2" style="width: 100%; padding: 5px;"></textarea>
                </div>
            </div>
        </div>
        
        <!-- Technician specific fields -->
        <div id="technician_fields_${rowCount}" style="display: none; margin-top: 10px;">
            <h4 style="margin-bottom: 10px; color: #34A853;">Technician Profile Details</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
                <div style="grid-column: 1 / -1;">
                    <label>Depot Address * <small style="color: #666;">(Start typing for Melbourne suggestions)</small></label>
                    <input type="text" name="depot_address_${rowCount}" id="depot_address_input_${rowCount}" placeholder="Start typing a Melbourne depot address..." required style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 14px;" autocomplete="off">
                </div>
                <div>
                    <label>Capacity Hours *</label>
                    <input type="number" name="capacity_hours_${rowCount}" value="8" min="1" max="24" required style="width: 100%; padding: 5px;">
                    <small style="color: #666;">Daily work capacity</small>
                </div>
                <div>
                    <label>Shift Start *</label>
                    <input type="time" name="shift_start_${rowCount}" value="08:00" required style="width: 100%; padding: 5px;">
                    <small style="color: #666;">Daily start time</small>
                </div>
                <div>
                    <label>Shift End *</label>
                    <input type="time" name="shift_end_${rowCount}" value="17:00" required style="width: 100%; padding: 5px;">
                    <small style="color: #666;">Daily end time</small>
                </div>
                <div style="grid-column: 1 / -1;">
                    <label>Skills</label>
                    <select name="skills_${rowCount}" id="skills_select_${rowCount}" multiple style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px; min-height: 100px;">
                        <!-- Skills will be populated dynamically -->
                    </select>
                    <small style="color: #666;">Hold Ctrl/Cmd to select multiple skills</small>
                </div>
                <div>
                    <label>Color Hex</label>
                    <input type="color" name="color_hex_${rowCount}" value="#4285F4" style="width: 100%; padding: 5px;">
                    <small style="color: #666;">Route display color</small>
                </div>
            </div>
        </div>
        
        <button type="button" onclick="this.parentElement.remove()" style="background: #dc3545; color: white; padding: 5px 15px; border: none; cursor: pointer; margin-top: 10px;">
            ‚ùå Remove Row
        </button>
    `;
    
    container.appendChild(row);
    
    // Add event listener for type change
    const typeSelect = row.querySelector(`#typeSelect_${rowCount}`);
    const step2 = row.querySelector(`#step2_${rowCount}`);
    const customerFields = row.querySelector(`#customer_fields_${rowCount}`);
    const technicianFields = row.querySelector(`#technician_fields_${rowCount}`);
    
    typeSelect.onchange = function() {
        const selectedType = this.value;
        
        if (selectedType === 'Customer' || selectedType === 'Technician') {
            // Show user information
            step2.style.display = 'block';
            
            // Show appropriate fields based on type
            if (selectedType === 'Customer') {
                customerFields.style.display = 'block';
                technicianFields.style.display = 'none';
                
                // Disable technician fields and enable customer fields
                const custRequired = customerFields.querySelectorAll('[required]');
                custRequired.forEach(el => el.disabled = false);
                
                const techRequired = technicianFields.querySelectorAll('[required]');
                techRequired.forEach(el => el.disabled = true);
            } else if (selectedType === 'Technician') {
                customerFields.style.display = 'none';
                technicianFields.style.display = 'block';
                
                // Disable customer fields and enable technician fields
                const custRequired = customerFields.querySelectorAll('[required]');
                custRequired.forEach(el => el.disabled = true);
                
                const techRequired = technicianFields.querySelectorAll('[required]');
                techRequired.forEach(el => el.disabled = false);
            }
        } else {
            // Hide everything if no type selected and disable all required fields
            step2.style.display = 'none';
            customerFields.style.display = 'none';
            technicianFields.style.display = 'none';
            
            const allRequired = row.querySelectorAll('[required]');
            allRequired.forEach(el => el.disabled = true);
        }
    };
    
    rowCount++;
    
    // Initially disable all required fields until type is selected
    const allRequiredFields = row.querySelectorAll('[required]');
    allRequiredFields.forEach(el => el.disabled = true);
    
    // Populate skills dropdowns
    populateSkillsDropdowns(rowCount - 1);
    
    // Initialize Google Places Autocomplete for address fields
    setTimeout(function() {
        initAutocomplete(rowCount - 1);
    }, 100);
}

// Function to populate skills dropdowns from Django data
function populateSkillsDropdowns(rowNum, selectId) {
    try {
        console.log('Populating skills for dropdown:', selectId, 'row:', rowNum);
        console.log('Skills data available:', typeof skillsData !== 'undefined' ? 'Yes' : 'No');
        
        if (typeof skillsData === 'undefined') {
            console.error('Skills data not available!');
            return;
        }
        
        const skillsSelect = document.getElementById(selectId);
        if (skillsSelect) {
            skillsData.forEach(function(skill) {
                const option = document.createElement('option');
                option.value = skill.name;
                option.textContent = skill.name;
                skillsSelect.appendChild(option);
            });
            console.log('Populated dropdown', selectId, 'with', skillsData.length, 'skills');
        } else {
            console.log('Dropdown not found:', selectId);
        }
    } catch (error) {
        console.error('Error populating skills dropdown:', error);
    }
}

// Function to initialize Google Places Autocomplete
function initAutocomplete(rowNum) {
    // Only initialize if Google Maps API is loaded
    if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
        console.log('Google Maps API not loaded yet');
        return;
    }
    
    const addressInput = document.getElementById('address_input_' + rowNum);
    const depotInput = document.getElementById('depot_address_input_' + rowNum);
    
    // Initialize for customer address
    if (addressInput) {
        const autocomplete = new google.maps.places.Autocomplete(addressInput, {
            types: ['address'],
            componentRestrictions: { country: 'au' },
            fields: ['formatted_address', 'geometry', 'place_id', 'address_components']
        });
        
        autocomplete.addListener('place_changed', function() {
            const place = autocomplete.getPlace();
            if (place.geometry) {
                console.log('Address selected:', place.formatted_address);
            }
        });
    }
    
    // Initialize for technician depot address
    if (depotInput) {
        const autocomplete = new google.maps.places.Autocomplete(depotInput, {
            types: ['address'],
            componentRestrictions: { country: 'au' },
            fields: ['formatted_address', 'geometry', 'place_id', 'address_components']
        });
        
        autocomplete.addListener('place_changed', function() {
            const place = autocomplete.getPlace();
            if (place.geometry) {
                console.log('Depot address selected:', place.formatted_address);
            }
        });
    }
}

// Add initial row when manual section is first shown
showUploadSection(); // Default to upload section

// Validation function before form submission
function validateAndSubmit(event) {
    console.log('Form submission triggered!');
    
    // Check if there are any entries
    const container = document.getElementById('entriesContainer');
    const entries = container.querySelectorAll('.manual-entry-row');
    
    if (entries.length === 0) {
        alert('Please add at least one entry before saving!');
        event.preventDefault();
        return false;
    }
    
    // Validate each entry
    let hasErrors = false;
    let errorMessages = [];
    
    entries.forEach(function(entry, index) {
        const type = entry.querySelector('select[name^="type_"]');
        const username = entry.querySelector('input[name^="username_"]');
        const email = entry.querySelector('input[name^="email_"]');
        
        if (type && type.value) {
            if (!username || !username.value) {
                hasErrors = true;
                errorMessages.push(`Entry ${index + 1}: Username is required`);
            }
            
            if (!email || !email.value) {
                hasErrors = true;
                errorMessages.push(`Entry ${index + 1}: Email is required`);
            }
            
            // Additional validation for customer
            if (type.value === 'Customer') {
                const address = entry.querySelector('input[name^="address_"]');
                const windowStart = entry.querySelector('input[name^="window_start_"]');
                const windowEnd = entry.querySelector('input[name^="window_end_"]');
                
                if (!address || !address.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Address is required for customers`);
                }
                
                if (!windowStart || !windowStart.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Window Start is required for customers`);
                }
                
                if (!windowEnd || !windowEnd.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Window End is required for customers`);
                }
            }
            
            // Additional validation for technician
            if (type.value === 'Technician') {
                const depotAddress = entry.querySelector('input[name^="depot_address_"]');
                const shiftStart = entry.querySelector('input[name^="shift_start_"]');
                const shiftEnd = entry.querySelector('input[name^="shift_end_"]');
                
                if (!depotAddress || !depotAddress.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Depot Address is required for technicians`);
                }
                
                if (!shiftStart || !shiftStart.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Shift Start is required for technicians`);
                }
                
                if (!shiftEnd || !shiftEnd.value) {
                    hasErrors = true;
                    errorMessages.push(`Entry ${index + 1}: Shift End is required for technicians`);
                }
            }
        }
    });
    
    if (hasErrors) {
        alert('Please fix the following errors:\n\n' + errorMessages.join('\n'));
        event.preventDefault();
        return false;
    }
    
    console.log('Form validation passed, submitting...');
    
    // Show loading indicator
    const submitButton = event.target.querySelector('button[type="submit"]');
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'üíæ Saving...';
    }
    
    return true; // Allow form submission
}
</script>

<!-- Load Google Maps API if not already loaded -->
<script>
// Check if Google Maps API key is available from Django context
{% if api_key %}
    // Load Google Maps API with Places library
    if (typeof google === 'undefined') {
        function initGoogleMaps() {
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key={{ api_key }}&libraries=places';
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }
        initGoogleMaps();
    }
{% endif %}
</script>

<div class="module">
    <h2>Excel File Format</h2>
    <p>Your Excel file should contain the following columns:</p>
    
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
            <tr style="background: #f0f0f0;">
                <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Column Name</th>
                <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Required</th>
                <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Description</th>
                <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Example</th>
            </tr>
        </thead>
        <tbody>
            <!-- Common fields -->
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Type</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Yes</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Customer or Technician</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Customer, Technician</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Username</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Yes</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Unique username</td>
                <td style="padding: 10px; border: 1px solid #ddd;">john_doe</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Email</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Yes</td>
                <td style="padding: 10px; border: 1px solid #ddd;">User email</td>
                <td style="padding: 10px; border: 1px solid #ddd;">john@example.com</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Password</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Default: Welcome123 if not provided</td>
                <td style="padding: 10px; border: 1px solid #ddd;">mypassword123</td>
            </tr>
            
            <!-- Customer fields -->
            <tr style="background: #e8f5e9;">
                <td colspan="4" style="padding: 10px; font-weight: bold;">Customer-Specific Columns</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Address</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required for Service Request</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Melbourne address for service</td>
                <td style="padding: 10px; border: 1px solid #ddd;">123 Collins St, Melbourne VIC 3000</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">ServiceMinutes</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No (default: 60)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Duration in minutes</td>
                <td style="padding: 10px; border: 1px solid #ddd;">90</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">WindowStart</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Start time (datetime)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">2025-10-28 09:00</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">WindowEnd</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required</td>
                <td style="padding: 10px; border: 1px solid #ddd;">End time (datetime)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">2025-10-28 17:00</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">RequiredSkills</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Comma-separated skills</td>
                <td style="padding: 10px; border: 1px solid #ddd;">electric, hvac</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Priority</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No (default: medium)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">high, medium, low</td>
                <td style="padding: 10px; border: 1px solid #ddd;">high</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">ServiceType</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Service request name</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Emergency Repair</td>
            </tr>
            
            <!-- Technician fields -->
            <tr style="background: #e3f2fd;">
                <td colspan="4" style="padding: 10px; font-weight: bold;">Technician-Specific Columns</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">DepotAddress</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Melbourne depot address</td>
                <td style="padding: 10px; border: 1px solid #ddd;">456 Bourke St, Melbourne VIC 3000</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">CapacityHours</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No (default: 8)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Daily work hours</td>
                <td style="padding: 10px; border: 1px solid #ddd;">8</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">ShiftStart</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Start time (HH:MM)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">08:00</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">ShiftEnd</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Required</td>
                <td style="padding: 10px; border: 1px solid #ddd;">End time (HH:MM)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">17:00</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">Skills</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Comma-separated skills</td>
                <td style="padding: 10px; border: 1px solid #ddd;">electric, plumbing, hvac</td>
            </tr>
            <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">ColorHex</td>
                <td style="padding: 10px; border: 1px solid #ddd;">No (default: #4285F4)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">Route color (hex)</td>
                <td style="padding: 10px; border: 1px solid #ddd;">#FF5733</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="module" style="margin-top: 30px; padding: 20px; background: #fff3cd; border: 1px solid #ffc107;">
    <h2>Important Notes</h2>
    <ul>
        <li><strong>Addresses must be in Melbourne</strong> - The system will validate and reject non-Melbourne addresses.</li>
        <li><strong>Duplicate usernames</strong> - If username exists, the user will be updated with new data.</li>
        <li><strong>Default password</strong> - If password is not provided, default password "Welcome123" will be used.</li>
        <li><strong>Skills</strong> - If a skill doesn't exist, it will be created automatically.</li>
        <li><strong>Date formats</strong> - Accepts multiple datetime formats (YYYY-MM-DD HH:MM, DD/MM/YYYY HH:MM, etc.).</li>
    </ul>
</div>

<div class="module" style="margin-top: 20px;">
    <h2>Sample Excel File</h2>
    <p>You can include both customers and technicians in a single sheet. Mixed rows are supported.</p>
    
    <div style="background: #f5f5f5; padding: 15px; margin: 15px 0;">
        <pre>Type | Username | Email              | Address                      | ServiceMinutes | WindowStart        | WindowEnd          | RequiredSkills | Priority
Customer | john_doe | john@example.com | 123 Collins St, Melbourne | 90            | 2025-10-28 09:00 | 2025-10-28 17:00 | electric,hvac  | high
Technician | mary_smith | mary@example.com | 456 Bourke St, Melbourne  | 8              | 08:00            | 17:00            | electric       | 
Customer | jane_wilson | jane@example.com | 789 Swanston St, Melbourne| 60            | 2025-10-28 10:00 | 2025-10-28 16:00 | plumbing       | medium</pre>
    </div>
</div>

{% endblock %}

